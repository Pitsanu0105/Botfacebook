        var express = require('express')
        var bodyParser = require('body-parser')
        var request = require('request')
        var firebase = require('firebase')
        var app = express()
        var config = {
            apiKey: 'AIzaSyBasyXEYg3xGN6Y9ndOtt9chPV4m60_6Xw',
            authDomain: 'it-3k-1f766.firebaseapp.com',
            databaseURL: 'https://it-3k-1f766.firebaseio.com',
            storageBucket: 'it-3k-1f766.appspot.com',
            messagingSenderId: '914467199924'
        }
        setInterval(function() {
            console.log('eieiee')
        }, 17000000)
        firebase.initializeApp(config)
        var It3k = firebase.database().ref('It3k')
        var data3k = [];
        It3k.on('child_added', function(snapshot) {
            data3k.push(snapshot.val());
            //console.log(data3k);
        });
        app.use(bodyParser.json())
        app.set('port', (process.env.PORT || 4000))
        app.use(bodyParser.urlencoded({
            extended: false
        }))
        app.use(bodyParser.json())

        app.get('/webhook', function(req, res) {
            var key = 'EAAJeCn5oY2wBACArnEtdI8TN998JFLrczb16ZAMMc5Ctr3VM3ytjkQDEteMzXppZClCLT2dvryZBWKl99hKK4Yhp5A8LNUy9emmklQ31eeCn9z7YsZAVxRKZAZBv7ZBvLtIHsW9MB5oUz3tF55vxyzIO1g0yEO6QLkvrszhjyZBLcwZDZD'
            if (req.query['hub.mode'] === 'subscribe' &&
                req.query['hub.verify_token'] === key) {
                console.log("Validating webhook");
                res.send(req.query['hub.challenge'])
            } else {
                console.error("Failed validation. Make sure the validation tokens match.");
                res.sendStatus(403);
            }
        });

        app.post('/webhook', function(req, res) {
            var data = req.body;

            // Make sure this is a page subscription
            if (data.object == 'page') {
                // Iterate over each entry
                // There may be multiple if batched
                data.entry.forEach(function(pageEntry) {
                    var pageID = pageEntry.id;
                    var timeOfEvent = pageEntry.time;

                    // Iterate over each messaging event
                    pageEntry.messaging.forEach(function(messagingEvent) {
                        if (messagingEvent.message) {
                            receivedMessage(messagingEvent);
                        } else if (messagingEvent.postback) {
                            receivedPostback(messagingEvent);
                        } else {
                            console.log("Webhook received unknown messagingEvent: ", messagingEvent);
                        }
                    });
                });

                // Assume all went well.
                //
                // You must send back a 200, within 20 seconds, to let us know you've
                // successfully received the callback. Otherwise, the request will time out.
                res.sendStatus(200);
            }
        });

        function receivedMessage(event) {
            var senderID = event.sender.id;
            var recipientID = event.recipient.id;
            var timeOfMessage = event.timestamp;
            var message = event.message;

            console.log("Received message for user %d and page %d at %d with message:",
                senderID, recipientID, timeOfMessage);
            console.log(JSON.stringify(message));

            var isEcho = message.is_echo;
            var messageId = message.mid;
            var appId = message.app_id;
            var metadata = message.metadata;

            // You may get a text or attachment but not both
            var messageText = message.text;
            var messageAttachments = message.attachments;
            var quickReply = message.quick_reply;


            /* if (isEcho) {
               // Just logging message echoes to console
               console.log("Received echo for message %s and app %d with metadata %s",
                 messageId, appId, metadata);
               return;
             } else if (quickReply) {
               var quickReplyPayload = quickReply.payload;
               console.log("Quick reply for message %s with payload %s",
                 messageId, quickReplyPayload);
               sendTextMessage(senderID, "Quick reply tapped");
               return;
             }*/

            if (messageText) {
                if (messageText === 'HELLO' || messageText === 'hello' || messageText === 'Hello') {
                    sendTextMessage(senderID, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö");
                } else if (messageText === '‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à' || messageText === '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì') {
                    sendTextMessage(senderID, "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö");
                }
                switch (messageText) {
                    case 'HELLO':
                        sendGreetMessage(senderID);
                        break;
                    case 'hello':
                        sendGreetMessage(senderID);
                        break;
                    case 'Hello':
                        sendGreetMessage(senderID);
                        break;
                    case '‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à':
                        break;

                    default:
                        sendTextMessage(senderID, "‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
                        sendGreetMessage(senderID)
                }
            } else if (messageAttachments) {
                sendTextMessage(senderID, "‡∏Ñ‡∏£‡∏±‡∏ö");
            }
        }

        function receivedPostback(event) {
            var senderID = event.sender.id;
            var recipientID = event.recipient.id;
            var timeOfPostback = event.timestamp;

            // The 'payload' param is a developer-defined field which is set in a postback
            // button for Structured Messages.
            var payload = event.postback.payload;

            console.log("Received postback for user %d and page %d with payload '%s' " +
                "at %d", senderID, recipientID, payload, timeOfPostback);
            if (payload == 'Program') {
                Programs(senderID);
            } else if (payload == 'USER_DEFINED_PAYLOAD') {
                sendTextMessage(senderID, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ‡∏°‡∏à‡∏û ‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏á‡∏≤‡∏ô IT 3 ‡∏û‡∏£‡∏∞‡∏à‡∏≠‡∏° ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 14 ‡∏Ñ‡∏£‡∏±‡∏ö")
                sendGreetMessage(senderID)
            } else if (payload == 'noThank') {
                sendTextMessage(senderID, "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö" + "\n" + "‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡πá‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö");
                NoThank(senderID)
            } else if (payload == 'Result') {
                Result(senderID)
            } else {
                var result = "";
            }

            // When a postback is called, we'll send a message back to the sender to
            // let them know it was successful
            // sendTextMessage(senderID, emoji);
        }
        // --------------------‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö---------------------------
        function sendGreetMessage(recipientId, messageText) {
            var messageData = {
                recipient: {
                    id: recipientId
                },
                message: {
                    attachment: {
                        type: "template",
                        payload: {
                            template_type: "button",
                            text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
                            buttons: [{
                                type: "postback",
                                title: "üîé ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå",
                                payload: "Program"
                            }, {
                                type: "postback",
                                title: "üîé ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô",
                                payload: "Result"
                            }, {
                                type: "postback",
                                title: "üëã ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì",
                                payload: "noThank"
                            }],
                        }
                    }
                }
            };

            callSendAPI(messageData);
        }
        //------------‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô---------------//
        function Result(recipientId, messageText) {}

        //-----------------------------//
        //-----------------------------------------------------------------------------
        //------------------‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£---------------------------------------------------
        function Programs(recipientId, messageText) {
            var it3kquerry = data3k.find(data => data.type === 'Picture')
            console.log(it3kquerry);
            callSendAPI(messageData);
        }
        //-----------------------------------------------------------------------------
        //----------------‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö------------------------------------------------------
        function sendTextMessage(recipientId, messageText) {
            var messageData = {
                recipient: {
                    id: recipientId
                },
                message: {
                    text: messageText
                }
            };

            callSendAPI(messageData);
        }
        //------------------------------------------------------------------------------
        //--------‡∏î‡∏∂‡∏áAPI‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢---------------------------------------------------------
        function callSendAPI(messageData) {
            request({
                uri: 'https://graph.facebook.com/v2.6/me/messages',
                qs: {
                    access_token: 'EAAJeCn5oY2wBACArnEtdI8TN998JFLrczb16ZAMMc5Ctr3VM3ytjkQDEteMzXppZClCLT2dvryZBWKl99hKK4Yhp5A8LNUy9emmklQ31eeCn9z7YsZAVxRKZAZBv7ZBvLtIHsW9MB5oUz3tF55vxyzIO1g0yEO6QLkvrszhjyZBLcwZDZD'
                },
                method: 'POST',
                json: messageData

            }, function(error, response, body) {
                if (!error && response.statusCode == 200) {
                    var recipientId = body.recipient_id;
                    var messageId = body.message_id;

                    console.log("Successfully sent generic message with id %s to recipient %s",
                        messageId, recipientId);
                } else {
                    console.error("Unable to send message.");
                    console.error(response);
                    console.error(error);
                }
            });
        }
        //------------------------------------------------------------------------------
        //------------‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å-----------------------------------------------------------
        function fineHeres(recipientId, messageText) {
            var messageData = {
                recipient: {
                    id: recipientId
                },
                message: {
                    attachment: {
                        type: "template",
                        payload: {
                            template_type: "button",
                            text: "‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡∏£‡∏π‡∏ì‡∏≤‡∏Å‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
                            buttons: [{
                                type: "postback",
                                title: "üîé ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏≠‡∏µ‡∏Å",
                                payload: "Program"
                            }],
                        }
                    }
                }
            };

            callSendAPI(messageData);
        }

        function NoThank(recipientId, messageText) {
            var messageData = {
                recipient: {
                    id: recipientId
                },
                message: {
                    attachment: {
                        type: "template",
                        payload: {
                            template_type: "button",
                            text: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ",
                            buttons: [{
                                type: "postback",
                                title: "üîé ‡∏â‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡πÄ‡∏•‡πâ‡∏ß",
                                payload: "USER_DEFINED_PAYLOAD"
                            }]
                        }
                    }
                }
            };

            callSendAPI(messageData);
        }

        app.listen(app.get('port'), function() {
            console.log('run at port', app.get('port'))
        })
